{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from '@cordobo/qrcode';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"qrcElement\"];\n\nclass QRCodeComponent {\n  constructor(renderer, sanitizer) {\n    this.renderer = renderer;\n    this.sanitizer = sanitizer;\n    this.allowEmptyString = false;\n    this.colorDark = \"#000000ff\";\n    this.colorLight = \"#ffffffff\";\n    this.cssClass = \"qrcode\";\n    this.elementType = \"canvas\";\n    this.errorCorrectionLevel = \"M\";\n    this.margin = 4;\n    this.qrdata = \"\";\n    this.scale = 4;\n    this.width = 10;\n    this.qrCodeURL = new EventEmitter();\n    this.context = null;\n  }\n\n  ngOnChanges() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.createQRCode();\n    });\n  }\n\n  isValidQrCodeText(data) {\n    if (this.allowEmptyString === false) {\n      return !(typeof data === \"undefined\" || data === \"\" || data === \"null\" || data === null);\n    }\n\n    return !(typeof data === \"undefined\");\n  }\n\n  toDataURL(qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      QRCode.toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  toCanvas(canvas, qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      QRCode.toCanvas(canvas, this.qrdata, qrCodeConfig, error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(\"success\");\n        }\n      });\n    });\n  }\n\n  toSVG(qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      QRCode.toString(this.qrdata, qrCodeConfig, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  renderElement(element) {\n    for (const node of this.qrcElement.nativeElement.childNodes) {\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  }\n\n  createQRCode() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.version && this.version > 40) {\n        console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n        this.version = 40;\n      } else if (this.version && this.version < 1) {\n        console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n        this.version = 1;\n      } else if (this.version !== undefined && isNaN(this.version)) {\n        console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n        this.version = undefined;\n      }\n\n      try {\n        if (!this.isValidQrCodeText(this.qrdata)) {\n          throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n        }\n\n        if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n          this.qrdata = \" \";\n        }\n\n        const config = {\n          color: {\n            dark: this.colorDark,\n            light: this.colorLight\n          },\n          errorCorrectionLevel: this.errorCorrectionLevel,\n          margin: this.margin,\n          scale: this.scale,\n          type: this.elementType,\n          version: this.version,\n          width: this.width\n        };\n        const centerImageSrc = this.imageSrc;\n        const centerImageHeight = this.imageHeight || 40;\n        const centerImageWidth = this.imageWidth || 40;\n\n        switch (this.elementType) {\n          case \"canvas\":\n            const canvasElement = this.renderer.createElement(\"canvas\");\n            this.context = canvasElement.getContext(\"2d\");\n            this.toCanvas(canvasElement, config).then(() => {\n              if (this.ariaLabel) {\n                this.renderer.setAttribute(canvasElement, \"aria-label\", `${this.ariaLabel}`);\n              }\n\n              if (this.title) {\n                this.renderer.setAttribute(canvasElement, \"title\", `${this.title}`);\n              }\n\n              if (centerImageSrc && this.context) {\n                this.centerImage = new Image(centerImageWidth, centerImageHeight);\n\n                if (centerImageSrc !== this.centerImage.src) {\n                  this.centerImage.src = centerImageSrc;\n                }\n\n                if (centerImageHeight !== this.centerImage.height) {\n                  this.centerImage.height = centerImageHeight;\n                }\n\n                if (centerImageWidth !== this.centerImage.width) {\n                  this.centerImage.width = centerImageWidth;\n                }\n\n                const centerImage = this.centerImage;\n\n                if (centerImage) {\n                  centerImage.onload = () => {\n                    var _a;\n\n                    (_a = this.context) === null || _a === void 0 ? void 0 : _a.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                  };\n                }\n              }\n\n              this.renderElement(canvasElement);\n              this.emitQRCodeURL(canvasElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] canvas error:\", e);\n            });\n            break;\n\n          case \"svg\":\n            const svgParentElement = this.renderer.createElement(\"div\");\n            this.toSVG(config).then(svgString => {\n              this.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n              const svgElement = svgParentElement.firstChild;\n              this.renderer.setAttribute(svgElement, \"height\", `${this.width}`);\n              this.renderer.setAttribute(svgElement, \"width\", `${this.width}`);\n              this.renderElement(svgElement);\n              this.emitQRCodeURL(svgElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] svg error:\", e);\n            });\n            break;\n\n          case \"url\":\n          case \"img\":\n          default:\n            const imgElement = this.renderer.createElement(\"img\");\n            this.toDataURL(config).then(dataUrl => {\n              if (this.alt) {\n                imgElement.setAttribute(\"alt\", this.alt);\n              }\n\n              if (this.ariaLabel) {\n                imgElement.setAttribute(\"aria-label\", this.ariaLabel);\n              }\n\n              imgElement.setAttribute(\"src\", dataUrl);\n\n              if (this.title) {\n                imgElement.setAttribute(\"title\", this.title);\n              }\n\n              this.renderElement(imgElement);\n              this.emitQRCodeURL(imgElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] img/url error:\", e);\n            });\n        }\n      } catch (e) {\n        console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n      }\n    });\n  }\n\n  emitQRCodeURL(element) {\n    const className = element.constructor.name;\n\n    if (className === SVGSVGElement.name) {\n      const svgHTML = element.outerHTML;\n      const blob = new Blob([svgHTML], {\n        type: \"image/svg+xml\"\n      });\n      const urlSvg = URL.createObjectURL(blob);\n      const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n      this.qrCodeURL.emit(urlSanitized);\n      return;\n    }\n\n    let urlImage = \"\";\n\n    if (className === HTMLCanvasElement.name) {\n      urlImage = element.toDataURL(\"image/png\");\n    }\n\n    if (className === HTMLImageElement.name) {\n      urlImage = element.src;\n    }\n\n    fetch(urlImage).then(urlResponse => urlResponse.blob()).then(blob => URL.createObjectURL(blob)).then(url => this.sanitizer.bypassSecurityTrustUrl(url)).then(urlSanitized => {\n      this.qrCodeURL.emit(urlSanitized);\n    }).catch(error => {\n      console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n    });\n  }\n\n}\n\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DomSanitizer));\n};\n\nQRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    allowEmptyString: \"allowEmptyString\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    imageSrc: \"imageSrc\",\n    imageHeight: \"imageHeight\",\n    imageWidth: \"imageWidth\",\n    margin: \"margin\",\n    qrdata: \"qrdata\",\n    scale: \"scale\",\n    version: \"version\",\n    width: \"width\",\n    alt: \"alt\",\n    ariaLabel: \"ariaLabel\",\n    title: \"title\"\n  },\n  outputs: {\n    qrCodeURL: \"qrCodeURL\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: \"qrcode\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `<div #qrcElement [class]=\"cssClass\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.DomSanitizer\n    }];\n  }, {\n    allowEmptyString: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    imageSrc: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    alt: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    qrCodeURL: [{\n      type: Output\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: [\"qrcElement\", {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass QRCodeModule {}\n\nQRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n  return new (t || QRCodeModule)();\n};\n\nQRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: []\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n\nexport { QRCodeComponent, QRCodeModule };","map":{"version":3,"sources":["C:/Users/JBErd/Documents/TESIS DEFINITIVA/diduniandes/frontend/diduniandes/node_modules/angularx-qrcode/fesm2015/angularx-qrcode.mjs"],"names":["__awaiter","i0","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","QRCode","i1","QRCodeComponent","constructor","renderer","sanitizer","allowEmptyString","colorDark","colorLight","cssClass","elementType","errorCorrectionLevel","margin","qrdata","scale","width","qrCodeURL","context","ngOnChanges","createQRCode","isValidQrCodeText","data","toDataURL","qrCodeConfig","Promise","resolve","reject","err","url","toCanvas","canvas","error","toSVG","toString","renderElement","element","node","qrcElement","nativeElement","childNodes","removeChild","appendChild","version","console","warn","undefined","isNaN","Error","config","color","dark","light","type","centerImageSrc","imageSrc","centerImageHeight","imageHeight","centerImageWidth","imageWidth","canvasElement","createElement","getContext","then","ariaLabel","setAttribute","title","centerImage","Image","src","height","onload","_a","drawImage","emitQRCodeURL","catch","e","svgParentElement","svgString","setProperty","svgElement","firstChild","imgElement","dataUrl","alt","message","className","name","SVGSVGElement","svgHTML","outerHTML","blob","Blob","urlSvg","URL","createObjectURL","urlSanitized","bypassSecurityTrustUrl","emit","urlImage","HTMLCanvasElement","HTMLImageElement","fetch","urlResponse","ɵfac","Renderer2","DomSanitizer","ɵcmp","args","selector","changeDetection","OnPush","template","static","QRCodeModule","ɵmod","ɵinj","providers","declarations","exports"],"mappings":"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","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from '@cordobo/qrcode';\nimport * as i1 from '@angular/platform-browser';\n\nclass QRCodeComponent {\n    constructor(renderer, sanitizer) {\n        this.renderer = renderer;\n        this.sanitizer = sanitizer;\n        this.allowEmptyString = false;\n        this.colorDark = \"#000000ff\";\n        this.colorLight = \"#ffffffff\";\n        this.cssClass = \"qrcode\";\n        this.elementType = \"canvas\";\n        this.errorCorrectionLevel = \"M\";\n        this.margin = 4;\n        this.qrdata = \"\";\n        this.scale = 4;\n        this.width = 10;\n        this.qrCodeURL = new EventEmitter();\n        this.context = null;\n    }\n    ngOnChanges() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createQRCode();\n        });\n    }\n    isValidQrCodeText(data) {\n        if (this.allowEmptyString === false) {\n            return !(typeof data === \"undefined\" ||\n                data === \"\" ||\n                data === \"null\" ||\n                data === null);\n        }\n        return !(typeof data === \"undefined\");\n    }\n    toDataURL(qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            QRCode.toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    toCanvas(canvas, qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            QRCode.toCanvas(canvas, this.qrdata, qrCodeConfig, (error) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(\"success\");\n                }\n            });\n        });\n    }\n    toSVG(qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            QRCode.toString(this.qrdata, qrCodeConfig, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    renderElement(element) {\n        for (const node of this.qrcElement.nativeElement.childNodes) {\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    createQRCode() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.version && this.version > 40) {\n                console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n                this.version = 40;\n            }\n            else if (this.version && this.version < 1) {\n                console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n                this.version = 1;\n            }\n            else if (this.version !== undefined && isNaN(this.version)) {\n                console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n                this.version = undefined;\n            }\n            try {\n                if (!this.isValidQrCodeText(this.qrdata)) {\n                    throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n                }\n                if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n                    this.qrdata = \" \";\n                }\n                const config = {\n                    color: {\n                        dark: this.colorDark,\n                        light: this.colorLight,\n                    },\n                    errorCorrectionLevel: this.errorCorrectionLevel,\n                    margin: this.margin,\n                    scale: this.scale,\n                    type: this.elementType,\n                    version: this.version,\n                    width: this.width,\n                };\n                const centerImageSrc = this.imageSrc;\n                const centerImageHeight = this.imageHeight || 40;\n                const centerImageWidth = this.imageWidth || 40;\n                switch (this.elementType) {\n                    case \"canvas\":\n                        const canvasElement = this.renderer.createElement(\"canvas\");\n                        this.context = canvasElement.getContext(\"2d\");\n                        this.toCanvas(canvasElement, config)\n                            .then(() => {\n                            if (this.ariaLabel) {\n                                this.renderer.setAttribute(canvasElement, \"aria-label\", `${this.ariaLabel}`);\n                            }\n                            if (this.title) {\n                                this.renderer.setAttribute(canvasElement, \"title\", `${this.title}`);\n                            }\n                            if (centerImageSrc && this.context) {\n                                this.centerImage = new Image(centerImageWidth, centerImageHeight);\n                                if (centerImageSrc !== this.centerImage.src) {\n                                    this.centerImage.src = centerImageSrc;\n                                }\n                                if (centerImageHeight !== this.centerImage.height) {\n                                    this.centerImage.height = centerImageHeight;\n                                }\n                                if (centerImageWidth !== this.centerImage.width) {\n                                    this.centerImage.width = centerImageWidth;\n                                }\n                                const centerImage = this.centerImage;\n                                if (centerImage) {\n                                    centerImage.onload = () => {\n                                        var _a;\n                                        (_a = this.context) === null || _a === void 0 ? void 0 : _a.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                                    };\n                                }\n                            }\n                            this.renderElement(canvasElement);\n                            this.emitQRCodeURL(canvasElement);\n                        })\n                            .catch((e) => {\n                            console.error(\"[angularx-qrcode] canvas error:\", e);\n                        });\n                        break;\n                    case \"svg\":\n                        const svgParentElement = this.renderer.createElement(\"div\");\n                        this.toSVG(config)\n                            .then((svgString) => {\n                            this.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n                            const svgElement = svgParentElement.firstChild;\n                            this.renderer.setAttribute(svgElement, \"height\", `${this.width}`);\n                            this.renderer.setAttribute(svgElement, \"width\", `${this.width}`);\n                            this.renderElement(svgElement);\n                            this.emitQRCodeURL(svgElement);\n                        })\n                            .catch((e) => {\n                            console.error(\"[angularx-qrcode] svg error:\", e);\n                        });\n                        break;\n                    case \"url\":\n                    case \"img\":\n                    default:\n                        const imgElement = this.renderer.createElement(\"img\");\n                        this.toDataURL(config)\n                            .then((dataUrl) => {\n                            if (this.alt) {\n                                imgElement.setAttribute(\"alt\", this.alt);\n                            }\n                            if (this.ariaLabel) {\n                                imgElement.setAttribute(\"aria-label\", this.ariaLabel);\n                            }\n                            imgElement.setAttribute(\"src\", dataUrl);\n                            if (this.title) {\n                                imgElement.setAttribute(\"title\", this.title);\n                            }\n                            this.renderElement(imgElement);\n                            this.emitQRCodeURL(imgElement);\n                        })\n                            .catch((e) => {\n                            console.error(\"[angularx-qrcode] img/url error:\", e);\n                        });\n                }\n            }\n            catch (e) {\n                console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n            }\n        });\n    }\n    emitQRCodeURL(element) {\n        const className = element.constructor.name;\n        if (className === SVGSVGElement.name) {\n            const svgHTML = element.outerHTML;\n            const blob = new Blob([svgHTML], { type: \"image/svg+xml\" });\n            const urlSvg = URL.createObjectURL(blob);\n            const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n            this.qrCodeURL.emit(urlSanitized);\n            return;\n        }\n        let urlImage = \"\";\n        if (className === HTMLCanvasElement.name) {\n            urlImage = element.toDataURL(\"image/png\");\n        }\n        if (className === HTMLImageElement.name) {\n            urlImage = element.src;\n        }\n        fetch(urlImage)\n            .then((urlResponse) => urlResponse.blob())\n            .then((blob) => URL.createObjectURL(blob))\n            .then((url) => this.sanitizer.bypassSecurityTrustUrl(url))\n            .then((urlSanitized) => {\n            this.qrCodeURL.emit(urlSanitized);\n        })\n            .catch((error) => {\n            console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n        });\n    }\n}\nQRCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: QRCodeComponent, deps: [{ token: i0.Renderer2 }, { token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nQRCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: QRCodeComponent, selector: \"qrcode\", inputs: { allowEmptyString: \"allowEmptyString\", colorDark: \"colorDark\", colorLight: \"colorLight\", cssClass: \"cssClass\", elementType: \"elementType\", errorCorrectionLevel: \"errorCorrectionLevel\", imageSrc: \"imageSrc\", imageHeight: \"imageHeight\", imageWidth: \"imageWidth\", margin: \"margin\", qrdata: \"qrdata\", scale: \"scale\", version: \"version\", width: \"width\", alt: \"alt\", ariaLabel: \"ariaLabel\", title: \"title\" }, outputs: { qrCodeURL: \"qrCodeURL\" }, viewQueries: [{ propertyName: \"qrcElement\", first: true, predicate: [\"qrcElement\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<div #qrcElement [class]=\"cssClass\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: QRCodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"qrcode\",\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `<div #qrcElement [class]=\"cssClass\"></div>`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.DomSanitizer }]; }, propDecorators: { allowEmptyString: [{\n                type: Input\n            }], colorDark: [{\n                type: Input\n            }], colorLight: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], elementType: [{\n                type: Input\n            }], errorCorrectionLevel: [{\n                type: Input\n            }], imageSrc: [{\n                type: Input\n            }], imageHeight: [{\n                type: Input\n            }], imageWidth: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], qrdata: [{\n                type: Input\n            }], scale: [{\n                type: Input\n            }], version: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], alt: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], qrCodeURL: [{\n                type: Output\n            }], qrcElement: [{\n                type: ViewChild,\n                args: [\"qrcElement\", { static: true }]\n            }] } });\n\nclass QRCodeModule {\n}\nQRCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: QRCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQRCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: QRCodeModule, declarations: [QRCodeComponent], exports: [QRCodeComponent] });\nQRCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: QRCodeModule, providers: [] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: QRCodeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [],\n                    declarations: [QRCodeComponent],\n                    exports: [QRCodeComponent],\n                }]\n        }] });\n\nexport { QRCodeComponent, QRCodeModule };\n"]},"metadata":{},"sourceType":"module"}