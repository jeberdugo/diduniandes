{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from '@cordobo/qrcode';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"qrcElement\"];\nlet QRCodeComponent = /*#__PURE__*/(() => {\n  class QRCodeComponent {\n    constructor(renderer, sanitizer) {\n      this.renderer = renderer;\n      this.sanitizer = sanitizer;\n      this.allowEmptyString = false;\n      this.colorDark = \"#000000ff\";\n      this.colorLight = \"#ffffffff\";\n      this.cssClass = \"qrcode\";\n      this.elementType = \"canvas\";\n      this.errorCorrectionLevel = \"M\";\n      this.margin = 4;\n      this.qrdata = \"\";\n      this.scale = 4;\n      this.width = 10;\n      this.qrCodeURL = new EventEmitter();\n      this.context = null;\n    }\n\n    ngOnChanges() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.createQRCode();\n      });\n    }\n\n    isValidQrCodeText(data) {\n      if (this.allowEmptyString === false) {\n        return !(typeof data === \"undefined\" || data === \"\" || data === \"null\" || data === null);\n      }\n\n      return !(typeof data === \"undefined\");\n    }\n\n    toDataURL(qrCodeConfig) {\n      return new Promise((resolve, reject) => {\n        QRCode.toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n\n    toCanvas(canvas, qrCodeConfig) {\n      return new Promise((resolve, reject) => {\n        QRCode.toCanvas(canvas, this.qrdata, qrCodeConfig, error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(\"success\");\n          }\n        });\n      });\n    }\n\n    toSVG(qrCodeConfig) {\n      return new Promise((resolve, reject) => {\n        QRCode.toString(this.qrdata, qrCodeConfig, (err, url) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n\n    renderElement(element) {\n      for (const node of this.qrcElement.nativeElement.childNodes) {\n        this.renderer.removeChild(this.qrcElement.nativeElement, node);\n      }\n\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n\n    createQRCode() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.version && this.version > 40) {\n          console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n          this.version = 40;\n        } else if (this.version && this.version < 1) {\n          console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n          this.version = 1;\n        } else if (this.version !== undefined && isNaN(this.version)) {\n          console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n          this.version = undefined;\n        }\n\n        try {\n          if (!this.isValidQrCodeText(this.qrdata)) {\n            throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n          }\n\n          if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n            this.qrdata = \" \";\n          }\n\n          const config = {\n            color: {\n              dark: this.colorDark,\n              light: this.colorLight\n            },\n            errorCorrectionLevel: this.errorCorrectionLevel,\n            margin: this.margin,\n            scale: this.scale,\n            type: this.elementType,\n            version: this.version,\n            width: this.width\n          };\n          const centerImageSrc = this.imageSrc;\n          const centerImageHeight = this.imageHeight || 40;\n          const centerImageWidth = this.imageWidth || 40;\n\n          switch (this.elementType) {\n            case \"canvas\":\n              const canvasElement = this.renderer.createElement(\"canvas\");\n              this.context = canvasElement.getContext(\"2d\");\n              this.toCanvas(canvasElement, config).then(() => {\n                if (this.ariaLabel) {\n                  this.renderer.setAttribute(canvasElement, \"aria-label\", `${this.ariaLabel}`);\n                }\n\n                if (this.title) {\n                  this.renderer.setAttribute(canvasElement, \"title\", `${this.title}`);\n                }\n\n                if (centerImageSrc && this.context) {\n                  this.centerImage = new Image(centerImageWidth, centerImageHeight);\n\n                  if (centerImageSrc !== this.centerImage.src) {\n                    this.centerImage.src = centerImageSrc;\n                  }\n\n                  if (centerImageHeight !== this.centerImage.height) {\n                    this.centerImage.height = centerImageHeight;\n                  }\n\n                  if (centerImageWidth !== this.centerImage.width) {\n                    this.centerImage.width = centerImageWidth;\n                  }\n\n                  const centerImage = this.centerImage;\n\n                  if (centerImage) {\n                    centerImage.onload = () => {\n                      var _a;\n\n                      (_a = this.context) === null || _a === void 0 ? void 0 : _a.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                    };\n                  }\n                }\n\n                this.renderElement(canvasElement);\n                this.emitQRCodeURL(canvasElement);\n              }).catch(e => {\n                console.error(\"[angularx-qrcode] canvas error:\", e);\n              });\n              break;\n\n            case \"svg\":\n              const svgParentElement = this.renderer.createElement(\"div\");\n              this.toSVG(config).then(svgString => {\n                this.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n                const svgElement = svgParentElement.firstChild;\n                this.renderer.setAttribute(svgElement, \"height\", `${this.width}`);\n                this.renderer.setAttribute(svgElement, \"width\", `${this.width}`);\n                this.renderElement(svgElement);\n                this.emitQRCodeURL(svgElement);\n              }).catch(e => {\n                console.error(\"[angularx-qrcode] svg error:\", e);\n              });\n              break;\n\n            case \"url\":\n            case \"img\":\n            default:\n              const imgElement = this.renderer.createElement(\"img\");\n              this.toDataURL(config).then(dataUrl => {\n                if (this.alt) {\n                  imgElement.setAttribute(\"alt\", this.alt);\n                }\n\n                if (this.ariaLabel) {\n                  imgElement.setAttribute(\"aria-label\", this.ariaLabel);\n                }\n\n                imgElement.setAttribute(\"src\", dataUrl);\n\n                if (this.title) {\n                  imgElement.setAttribute(\"title\", this.title);\n                }\n\n                this.renderElement(imgElement);\n                this.emitQRCodeURL(imgElement);\n              }).catch(e => {\n                console.error(\"[angularx-qrcode] img/url error:\", e);\n              });\n          }\n        } catch (e) {\n          console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n        }\n      });\n    }\n\n    emitQRCodeURL(element) {\n      const className = element.constructor.name;\n\n      if (className === SVGSVGElement.name) {\n        const svgHTML = element.outerHTML;\n        const blob = new Blob([svgHTML], {\n          type: \"image/svg+xml\"\n        });\n        const urlSvg = URL.createObjectURL(blob);\n        const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n        this.qrCodeURL.emit(urlSanitized);\n        return;\n      }\n\n      let urlImage = \"\";\n\n      if (className === HTMLCanvasElement.name) {\n        urlImage = element.toDataURL(\"image/png\");\n      }\n\n      if (className === HTMLImageElement.name) {\n        urlImage = element.src;\n      }\n\n      fetch(urlImage).then(urlResponse => urlResponse.blob()).then(blob => URL.createObjectURL(blob)).then(url => this.sanitizer.bypassSecurityTrustUrl(url)).then(urlSanitized => {\n        this.qrCodeURL.emit(urlSanitized);\n      }).catch(error => {\n        console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n      });\n    }\n\n  }\n\n  QRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n    return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DomSanitizer));\n  };\n\n  QRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QRCodeComponent,\n    selectors: [[\"qrcode\"]],\n    viewQuery: function QRCodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n      }\n    },\n    inputs: {\n      allowEmptyString: \"allowEmptyString\",\n      colorDark: \"colorDark\",\n      colorLight: \"colorLight\",\n      cssClass: \"cssClass\",\n      elementType: \"elementType\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      imageSrc: \"imageSrc\",\n      imageHeight: \"imageHeight\",\n      imageWidth: \"imageWidth\",\n      margin: \"margin\",\n      qrdata: \"qrdata\",\n      scale: \"scale\",\n      version: \"version\",\n      width: \"width\",\n      alt: \"alt\",\n      ariaLabel: \"ariaLabel\",\n      title: \"title\"\n    },\n    outputs: {\n      qrCodeURL: \"qrCodeURL\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"qrcElement\", \"\"]],\n    template: function QRCodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return QRCodeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet QRCodeModule = /*#__PURE__*/(() => {\n  class QRCodeModule {}\n\n  QRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n    return new (t || QRCodeModule)();\n  };\n\n  QRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QRCodeModule\n  });\n  QRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: []\n  });\n  return QRCodeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nexport { QRCodeComponent, QRCodeModule }; //# sourceMappingURL=angularx-qrcode.mjs.map","map":null,"metadata":{},"sourceType":"module"}